#lang racket
(define (expt x n) (
	cond ((= n 0) 1 )
	     ((even? n) (square (expt x (/ n 2))))
	     (else (* x (expt x (- n 1))))
))
(define (expt-iter-next x n val) 
	  (cond ((< n 2) val)
		((even? n) (expt-iter-next x (/ n 2) (* val (square x))))
		(else (expt-iter-next x (- n 1) (* val x)))
	   )
	  )
(define (expt-iter x n) 
  (
	cond ((= n 0) 1)
	     ((= n 1) x)
	     (else (expt-iter-next x n 1))
)
)
(define (square x) 
	(* x x)
)
(define (even? x) 
	(= (remainder x 2) 0)
)

(provide expt-iter)
(provide expt)
(provide square)
